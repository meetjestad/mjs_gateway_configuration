# Inspired by https://gist.github.com/drmalex07/c0f9304deea566842490
# and https://blog.kylemanna.com/linux/ssh-reverse-tunnel-on-linux-with-systemd/

[Unit]
Description=Remote SSH access through Nuttssh
After=network.target

# After this many restarts (within StartLimitInterval), reboot the entire
# system. This guards against a 4G modem that can no longer register on the
# network or an ethernet connection that is stuck without a link after a
# badly-timed powercycle (both have been witnessed on the Lorank gateway).
#
# Note that this just counts restarts, not consecutive failures, but that seems
# to be the best systemd can do (and might also be safer than relying on
# nuttssh exit status for failures).
StartLimitBurst=180
StartLimitAction=reboot
# This interval is a lot bigger than than StartLimitBurst * RestartSec to
# ensure that even if nuttssh takes a lot of time to discover failure, the
# limit is still triggered.
StartLimitInterval=24h

[Service]
User=nuttssh
ExecStartPre=/bin/sh -c "[ -f ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ''"
# - Let SSH send keepalives every 60s and exit if 2 of them are not responded to
# - Exit when port forwarding fails, since that is the entire point of the connection
# - Auto-accept new host-keys to simplify initial deployment
ExecStart=/usr/bin/ssh %H@nuttssh.meetjestad.net -p 1878 -R 22:localhost:22 -NT -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -o ExitOnForwardFailure=yes -o StrictHostKeyChecking=accept-new

# Wait for some time between restarts
RestartSec=60
Restart=always

[Install]
WantedBy=multi-user.target
