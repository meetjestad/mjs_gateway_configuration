#!/bin/sh -e
#
# 2012 Nico Schottelius (nico-cdist at schottelius.org)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#
#

state_is=$(cat "$__object/explorer/state")
owner_is=$(cat "$__object/explorer/owner")
group_is=$(cat "$__object/explorer/group")

state_should=$(cat "$__object/parameter/state")

branch=$(cat "$__object/parameter/branch")

source=$(cat "$__object/parameter/source")

destination="/$__object_id"

owner=$(cat "$__object/parameter/owner")
group=$(cat "$__object/parameter/group")
mode=$(cat "$__object/parameter/mode")

[ -f "$__object/parameter/recursive" ] && recursive='--recurse-submodules' || recursive=''
[ -f "$__object/parameter/shallow" ] && shallow='--depth 1 --shallow-submodules' || shallow=''

[ "$state_should" = "$state_is" ] \
 && [ "$owner" = "$owner_is" ] \
 && [ "$group" = "$group_is" ] \
 && [ -n "$mode" ] && exit 0

case $state_should in
    present)
        if [ "$state_should" != "$state_is" ]; then
            echo git clone --quiet "$recursive" "$shallow" --branch "$branch" "$source" "$destination"
        fi
        if { [ -n "$owner" ] && [ "$owner_is" != "$owner" ]; } || \
           { [ -n "$group" ] && [ "$group_is" != "$group" ]; }; then
            echo chown -R "${owner}:${group}" "$destination"
        fi
        if [ -n "$mode" ]; then
            echo chmod -R "$mode" "$destination"
        fi
    ;;

    absent)
        # Handled in manifest
    ;;

    *)
        echo "Unknown state: $state_should" >&2
        exit 1
    ;;
esac
